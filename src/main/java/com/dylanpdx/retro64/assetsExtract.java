package com.dylanpdx.retro64;

import java.io.File;
import java.io.IOException;
import java.util.Comparator;
import java.nio.file.DirectoryNotEmptyException;
import java.nio.file.Files;
import java.nio.file.Path;

/**
 * Extract audio assets
 */
public class assetsExtract {

    public static String extractToTmp(File rom) throws IOException, InterruptedException {
        var tempDir = Files.createTempDirectory("retro64");
        File exeFile;
        if (System.getProperty("os.name").contains("Windows")) {
            exeFile = Path.of("mods","genfiles.exe").toFile();
        } else {
            exeFile = Path.of("mods","genfiles","genfiles.sh").toFile();
        }
        // check if exe exists
        if (!exeFile.exists()) {
            Retro64.LOGGER.info("exe file not found");
            return null;
        }
        ProcessBuilder pb;
        if (System.getProperty("os.name").contains("Windows")) {
            // run exe with rom as 1st argument, and temp dir as working dir\
            pb = new ProcessBuilder(exeFile.getAbsolutePath(), rom.getAbsolutePath());
        } else {
            Path genfilesDir = Path.of("mods","genfiles");
            File[] genfilesDirContents = genfilesDir.toFile().listFiles();
            // move files in genfiles dir to temp dir
            for (int i = 0; i < genfilesDirContents.length; i++) {
                if (genfilesDirContents[i].getName().equals("genfiles.sh")) {
                    // skip genfiles.sh
                } else {
                    Retro64.LOGGER.info("adding " + genfilesDirContents[i].toPath().toString() + "...");
                    Files.copy(genfilesDirContents[i].toPath(), tempDir.resolve(genfilesDirContents[i].getName()));
                }
            }
            // copy rom to temp dir
            Files.copy(rom.toPath(), tempDir.resolve(rom.getName()));
            // set genfiles.sh as executable
            if (!exeFile.canExecute()) {
                exeFile.setExecutable(true);
            }
            pb = new ProcessBuilder("/bin/bash", exeFile.getAbsolutePath());
        }
        pb.directory(tempDir.toFile());
        Process p = pb.start();
        p.waitFor();
        // Linux needs to clean up the mess it made in the temp dir :(
        if (!System.getProperty("os.name").contains("Windows")) {
            File[] tempDirContents = tempDir.toFile().listFiles();
            // delete program files in temp dir
            for (int i = 0; i < tempDirContents.length; i++) {
                if (tempDirContents[i].getName().equals("bank_sets") || tempDirContents[i].getName().equals("sequences.bin") || tempDirContents[i].getName().equals("sound_data.tbl") || tempDirContents[i].getName().equals("sound_data.ctl")) {
                    // skip files generated by genfiles.sh
                } else {
                    try {
                        Retro64.LOGGER.info("deleting " + tempDirContents[i].toPath().toString() + "...");
                        Files.delete(tempDirContents[i].toPath());
                    } catch (DirectoryNotEmptyException e) { // Files.delete throws this if the directory is not empty
                        Retro64.LOGGER.info("file was actually a non-empty directory, deleting recursively...");
                        // delete directories recursively (thanks GitHub Copilot for the help here)
                        Files.walk(tempDirContents[i].toPath()).sorted(Comparator.reverseOrder()).map(Path::toFile).forEach(File::delete);
                    }
                }
            }
        }
        // return all files in temp dir
        if (tempDir.toFile().listFiles().length!=4)
            return null;
        return tempDir.toString();
    }

}
